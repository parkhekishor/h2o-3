#! /usr/bin/groovy

def AGENT_LABEL = 'docker && !mr-0xc8'
GString IMAGE_NAME = "${params.dockerRegistry}/opsh2oai/h2o-3-runtime:${currentBuild.number}"

pipeline {

  agent { label AGENT_LABEL }

  parameters {
    string(name: 'gitBranch', defaultValue: 'master', description: 'Branch to load the Dockerfile from.')
    booleanParam(name: 'publishDockerImage', defaultValue: true, description: 'If true, publish the docker image')
    string(name: 'dockerRegistry', defaultValue: 'docker.h2o.ai')
    booleanParam(name: 'noCache', defaultValue: false, description: 'If true, build the docker image using the --no-cache flag')
    string(name: 'XGBoostRevision', defaultValue: '9dfabf5', description: 'XGBoost revision to install in h2o_xgboost_env_python virtualenvs')
  }

  environment {
    H2O_GIT_URL = 'https://github.com/h2oai/h2o-3.git'
  }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 2, unit: 'HOURS')
  }

  stages {
    stage ('Checkout Sources') {
      steps {
        git url: env.H2O_GIT_URL, branch: params.gitBranch
      }
    }

    stage ('Build Docker Image') {
      steps {
        script {
          def dockerBuildCMD = 'docker build'
          if (params.noCache) {
            dockerBuildCMD += ' --no-cache'
          }
          dockerBuildCMD += " -t ${IMAGE_NAME} --build-arg JENKINS_UID=\$(id -u) --build-arg JENKINS_GID=\$(id -g) --build-arg XGBOOST_REVISION=${XGBoostRevision}."
          sh """
          printenv
          cd docker
          ${dockerBuildCMD}
          """
        }
      }
    }

    stage ('Publish Docker Image') {
      when {
        expression { params.publishDockerImage }
      }
      steps {
        withCredentials([usernamePassword(credentialsId: "${params.dockerRegistry}", usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWORD')]) {
          sh """
          docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD ${params.dockerRegistry}
          docker push ${IMAGE_NAME}
          """
          echo "###### Docker image ${IMAGE_NAME} built and pushed. ######"
        }
      }
    }
  }

  post {
    failure {
      emailext (
        subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
        to: "michalr@h2o.ai"
      )
    }
    success {
      emailext (
        subject: "New ${IMAGE_NAME} docker image READY!",
        body: """<p>The new ${IMAGE_NAME} docker image is ready.</p>
        <p>Check the build at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
        to: "michalr@h2o.ai"
      )
    }
  }
}
